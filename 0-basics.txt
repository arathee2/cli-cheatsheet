-------------------------------------------------------------------------------
Syntax
-------------------------------------------------------------------------------
command -options arguments

Short options are preceded by a single dash (-), and multiple short options could be strung together using only one single dash
Long options are preceded by a double dashe (--) and cannot be strung together.

-------------------------------------------------------------------------------
Miscellaneous
-------------------------------------------------------------------------------
exit
date
cal
df
free

-------------------------------------------------------------------------------
Browse Files and Directories
-------------------------------------------------------------------------------
pwd
cd
ls
file
less
reset

-------------------------------------------------------------------------------
Manipulate Files and Directories
-------------------------------------------------------------------------------
cp
mv
mkdir
rm
ln

-------------------------------------------------------------------------------
Help
-------------------------------------------------------------------------------
type
which
help
man
whatis
apropos

-------------------------------------------------------------------------------
# I/O
-------------------------------------------------------------------------------
# commands
cat
sort
uniq
grep
wc
head
tail              # use -f option to print real-time contents of fiel; use ctrl-c to exit
tee               # takes input from stdin, outputs to a file as well as stdout; `ls | tee file | wc`

# redirection
ls > file.txt     # redirect output to a file instead of the default stdout; use >> to append to file instead of overwriting
ls 2> err.txt     # redirect errors to a file instead of the default stderr
ls &> fe.txt      # redirect stdout and stderr to the same file; use &>> to append to file instead of overwriting
ls > dev/null     # dev/null is like a trash can, use it when you want to discard output
cat < file        # cat takes input from file instead of `stdin` which is the keyboard by default

# piping
cmd1 | cmd2       # send output of cmd1 as input to cmd2; do not try cmd1 > cmd2 as it treats cmd2 as filename

-------------------------------------------------------------------------------
Expressions
-------------------------------------------------------------------------------
$((expression))  # syntax
$((2 + 3))       # evaluates to 5

# expansions
!3               # history expansion: execute the third command from history
~                # home directory expansion: expands to path of the home directory of current user; ~arathee2 expands to home directory of the user arathee2
$COLOR           # variable expansion: expands to the value of the environment variable COLOR if it exists else an empty string; `printenv` shows all available variables
$(ls | wc)       # command expansion; alternatively "echo `ls | wc`" without the quotes is equivalent i.e. `` replace $()
{01..15}         # expands to 01 02 03 ... 15
x{a, b, c}y      # expands to xay, xby, xcy

# avoiding expansions
"~ {a, b} $X"    # suppressing: outputs ~ {a, b} 4 ; double quotes suppress special characters except $. 
'~ {a, b} $X'    # suppressing: outputs ~ {a, b} $X; single quotes suppress all special characters
a\$b             # escaping: use backslash (escape sequence) to suppress special meaning on $, !, &, and whitespaces. Use \\ to escape the escape sequence.

-------------------------------------------------------------------------------
History
-------------------------------------------------------------------------------
history
!!               # execute last command
!3               # execute the third command from history
!string          # execute the last command that starts with string
!?string         # execute the last command that contains the string

ctrl-r           # incremental search: type ctrl-r consecutively to find the next matches in history; ctrl-j to copy the matched command; ctrl-g or ctrl-c to cancel
clear            # clears screen; equivalent to ctrl-l

-------------------------------------------------------------------------------
Permissions
-------------------------------------------------------------------------------
# syntax in ls
-rwxrwxrwx      # read, write and executable permissions for user, group and the world (rest of the users)
                # first characters represents a file (-),  directory (d), a symbolic link (l), character (c) special file or block (b) special file

# commands
id              # displays user identity
chmod           # change (add or remove) file/directory read/write/execute permission
chown           # change file/directory user/group owner
chgrp           # change file/directory group owner only; prefer chown
umask           # remove file/directory read/write/execute permission
su              # substitute user: login using a different user
sudo            # execute command as another user
passwd          # change password of current or any other user

-------------------------------------------------------------------------------
Process
-------------------------------------------------------------------------------
ps              # list processes
top             # a more verbose and live version of ps

ctrl-c          # terminate process safely
ctrl-z          # supend process: move process from foregorund to background

emacs &         # start emacs and immediately move it to background returning the prompt back

jobs            # processes running in background in the terminal listed along with their jobspec (a number listed in square brackets to be used with bg and fg commands)
bg              # resume running suspended process (suspended using ctrl-z) in the background. Use `bg %<jobspec>` if multiple processes are suspended
fg              # `fg %<jobspec>` bring the specified background job to foreground. Use `jobs` to see what number to use. No number required for a single background job.

kill            # send signal (terminate, suspend, continue, stop, kils, etc.) to a process. Signals could be sent to processes that a user owns (unless you are a superuser).
killall         # send signal to multiple processes of a single program
shutdown        # halt, reboot or power off system

# misc
pstree          # process list in tree format
vmstat          # show cpu, memory usage
xload           # show system resource usage in a graphical window
tload           # show system resource usage in the terminal. ctrl-c to terminate.


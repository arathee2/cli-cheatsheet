#!/bin/bash                                       # shebang followed by path of interpreter to use to run this script; use -x option at the end to enable code tracing

# variables
variable="value"                                  # notice there is no space around the equality symbol; variable will always be a string regardless of the data type being assigned
echo $variable                                    # $variable expands to "value"
echo "$variable"                                  # same as above but more defensive to use quotes around variable
echo "$variable$variable"                         # concatenation; expands to "valuevalue"

declare -r CONSTANT="value"                       # declaring a constant; rarely used convention

echo "$variable_2"                                # expand `variable_2` and echo
echo "${variable}_2"                              # expand `variable`, concatenate `_2` to it and echo

# reading keyboard input
read x                                            # read keyboard input and assign to variable `x`
read                                              # read input and assign to shell variable `REPLY`
read x1 x2 x3                                     # read inputs separated by space and assign to three variables; if less inputs than variables -> remaining variables are ""; if more inputs than variables than last variable has all the remaining inputs.

# exit command
exit [integer]                                    # every command returns an exit status; 0 indicates success; 1-255 indicate different types of failures; uses exit status of last command if no integer is used

# functions
function function_name {                          # define a function; alternatively, use `function_name () {`
    local variable                                # avoid conflicts with global `variable`
    variable=$1                                   # set variable to the first argument passed to the function
    command
    command
    .
    .
    .
    command
    return [int]                                  # optional statement; int value represents exit status of function
}

function_name "$var1" "$var2" ...                 # call function with multiple arguments

# conditional statements
## if statement syntax
if commands; then
   commands
[elif commands; then
     commands]
[else 
     commands]
fi

## testing commands/expressions: refer chapter 27, page 408 of TLCL for details on file tests
if [ expression ]; then
    commands
fi

[ expression ]                                    # returns true (1) or false (0); need to escape special characters such as <, >, (, )
[ expression && expression ]                      # AND test; `&&` and `-a` are equivalent
[ expression || expression ]                      # OR test; `||` and `-o` are equivalent
[ ! (expression) ]                                # NOT test

[ "$string" ]                                     # true is string is not null
[ -n "$string" ]                                  # true if length of string is greather than zero
[ -z "$string" ]                                  # true if length of string is zero
[ "$string1" == "$string2" ]
[ "$string1" != "$string2" ]
[ "$string1" > "$string2" ]                       # true if $string1 sorts after $string2
[ "$string1" < "$string2" ]

[ $integer1 -eq $integer2 ]                       # do not use quotes around variables for integer tests
[ $integer1 -ne $integer2 ]
[ $integer1 -le $integer2 ]
[ $integer1 -lt $integer2 ]
[ $integer1 -ge $integer2 ]
[ $integer1 -gt $integer2 ]

[ "$file1" -f "$file2" ]                          # returns true if both files have same inode number on disk
[ -w "$file" ]                                    # returns true if file is writable

[[ expression ]]                                  # same as [ expression ] but also supports regex pattern and pathname expansion matching; no need to escape special characters such as <, >, (, )
[[ "$string1" =~ ^[0-9]+$ ]]
[[ "$file" == foo.* ]]

(( expression ))                                  # used only for interger tests; does not require $ and quotes around variable name; no need to escape special characters such as <, >, (, )
(( VALUE == 0 ))
(( ((VALUE % 2)) == 0 ))

## case statement
case variable in
    pattern [| pattern]...) commands ;;           # use `;;&` to continue test since `;;` ends execution of case statement			   
esac
			    
# loops
while condition; do
      commands
      continue
      break
done

while read x y; do
      commands
done < file.txt                                   # file contains two strings separated by space in each line; loop continues until all lines are read

cat file.txt > while read x y; do                 # same as above but with piping
    commands
done

until condition; do
      commands
done

for var in words; do
    commands
done

for (( expression1; expression2; expression3 )); do
    commands
done

# positional parameters
- Access positional parameters of program or function by using $0, $1, ..., $9, ${10}, ${11}, ...
- $# returns number of paramaters
- $* expands into a list of positional parameters starting from 1. "$*" expands into one string containing all parameters separated by character present in the IFS shell variable.
- $@ expands into a list of positional parameters starting from 1. "$@" expands each individual parameters as "$*".
- `shift` shifts values in positional parameters by one i.e. $1 becomes $2, $2 becomes $3 and so on. $0 is unchanged.
- `$(basename "$0")` extracts the filename from full path of a program name if $0 contains program name.

# string expansion
a = "my"
echo $a                                           # expand `a` as "my"
echo ${a}                                         # print "my"

echo $a_file                                      # error. tries to expand the variables `a_file` which does not exist
echo ${a}_file                                    # print "my_file"

echo ${b:-"other"}                                # expands to the default value "other" if variable is empty/non-existent; only valid for non-positional parameters
echo ${b}                                         # empty value

echo ${c:="other"}                                # expands AND sets value of c = "other" if variable is  empty/non-existent; only valid for non-positional parameters
echo ${c}                                         # "other"

echo ${d:?"message"}                              # print "message" to stderr if variable is empty/non-existent
echo ${d}                                         # print ""

echo ${e:+"substitute"}                           # expand `e` as ""; if variable is non-empty, assign "substitute", if variable is empty/non-existent do nothing i.e. print nothing
echo ${e}                                         # print ""

e="value"
echo ${e:+"substitute"}                           # expand `e` as "substitute" because `e` exists.
echo ${e}                                         # print "substitute"

echo ${!prefix*}                                  # expansion returns variables whose *names* (not value) begin with "prefix"

echo ${#variable}                                 # expands to string length

echo ${variable:offset:length}                    # expands to variable starting from offset (int) and ends at length (optional, int)
echo ${variable: -offset:length}                  # same as above but with negative offset which starts from end similar to Python my_string[-2]; notice the space before '-'

echo ${variable#pattern}                          # removes leading pattern match from variable and expands (non-greedy match)
echo ${variable##pattern}                         # same as above but does greedy matching

echo ${variable%pattern}                          # same as above but matches pattern at the end of the string
echo ${variable%%pattern}                         # same as above but does greedy matching

echo ${variable/pattern/repl}                     # match FIRST occurrence of pattern and replace with string
echo ${variable//pattern/repl}                    # match ALL occurrences of pattern and replace with string
echo ${variable/#pattern/repl}                    # match occurrence of pattern at the BEGINNING of variable and replace with string
echo ${variable/%pattern/repl}                    # match occurrence of pattern at the END of variable and replace with string

var = "aBcD"
echo ${var,,}                                     # change all characters of `var` to lowercase
echo ${var,}                                      # change first character of `var` to lowercase
echo ${var^^}                                     # change all characters of `var` to uppercase
echo ${var^}                                      # change first character of `var` to uppercase

# numbers: arithmatic operations are similar to C
echo $((-4))
echo $((3-4))


# here command
command << _EOF_                                  # command takes text as input; _EOF_ is a token, any token could be used; use <<- to ignore leading tabs used for better readability
text
_EOF_
